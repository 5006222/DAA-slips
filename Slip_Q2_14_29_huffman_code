package assignment_3;
import java.util.PriorityQueue;

public class SimpleHuffman
{
	
    static class Node 
    {
        char ch;
        int freq;
        Node left, right;
        Node(char ch, int freq) {
            this.ch = ch;
            this.freq = freq;
        }
    }

    public static void main(String[] args) {
        char[] characters = {'m','p','i','s' };
        int[] frequencies = { 1, 2, 4, 4 };

        PriorityQueue<Node> queue = new PriorityQueue<>((a, b) -> a.freq - b.freq);

        for (int i = 0; i < characters.length; i++) {

            queue.add(new Node(characters[i], frequencies[i]));
        }

        while (queue.size() > 1) {
            Node first = queue.poll();
            Node second = queue.poll();
            Node merged = new Node('-', first.freq + second.freq);
            merged.left = first;
            merged.right = second;
            queue.add(merged);
        }

        generateCode(queue.poll(), "");
    }

    static void generateCode(Node node, String code) {
        if (node == null) return;
        if (node.left == null && node.right == null) {
            System.out.println(node.ch + " -> " + code);
        }
        generateCode(node.left, code + "0");
        generateCode(node.right, code + "1");
    }
}
