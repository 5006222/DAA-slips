import java.util.*;

public class BFSExample {

    // Graph representation using adjacency list
    static class Graph {
        private int vertices;
        private LinkedList<Integer>[] adjList;

        // Constructor to initialize the graph
        public Graph(int vertices) {
            this.vertices = vertices;
            adjList = new LinkedList[vertices];
            for (int i = 0; i < vertices; i++) {
                adjList[i] = new LinkedList<>();
            }
        }

        // Function to add an edge to the graph (directed graph)
        public void addEdge(int src, int dest) {
            adjList[src].add(dest);
        }

        // Function to perform BFS
        public void BFS(int start) {
            boolean[] visited = new boolean[vertices];
            Queue<Integer> queue = new LinkedList<>();

            // Mark the start node as visited and enqueue it
            visited[start] = true;
            queue.add(start);

            // Continue BFS while there are nodes to explore in the queue
            while (!queue.isEmpty()) {
                int node = queue.poll();
                System.out.print(node + " ");

                // Explore all unvisited neighbors of the current node
                for (int neighbor : adjList[node]) {
                    if (!visited[neighbor]) {
                        visited[neighbor] = true;
                        queue.add(neighbor);
                    }
                }
            }
        }
    }

    // Main function to test the BFS algorithm
    public static void main(String[] args) {
        Graph graph = new Graph(6);

        // Adding edges to the graph
        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 3);
        graph.addEdge(1, 4);
        graph.addEdge(2, 5);

        System.out.println("Breadth First Search starting from node 0:");
        graph.BFS(0); // Perform BFS starting from node 0
    }
}
